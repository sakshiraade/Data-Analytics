# -*- coding: utf-8 -*-
"""Data Architectural Diagram.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jde8H1-549kp0WoOVQAyZMtkRlOLsxOg

# **Architectural Diagram**

Importing the Diagrams library
"""

!pip install diagrams
!apt-get install -y graphviz

from google.colab import files
uploaded = files.upload()

##Perfect one
# Importing diagrams with custom icons
from diagrams import Diagram, Cluster, Edge, Node
from diagrams.custom import Custom
from diagrams.onprem.client import Users
from diagrams.aws.storage import S3
import os

# Define custom icon class
class CustomIcon(Node):
    _provider = "custom"
    _icon_dir = "/usr/local/share/diagrams/resources/custom"  # Path for the custom directory

# Define specific icons
class HuggingFace(CustomIcon):
    _icon = "huggingface.png"
class Streamlit(CustomIcon):
    _icon = "streamlit.png"
class OpenAI(CustomIcon):
    _icon = "openai.png"
class AWSS3(CustomIcon):
    _icon = "aws_s3.png"

#  Structure of the diagram
with Diagram("GAIA Data Architectural Diagram", show=True, direction="TB"):

    # Define the users interacting with the UI
    user = Users("User")

    # Defining Hugging Face
    with Cluster("Hugging Face"):
        hugging_face = Custom("Hugging Face(GAIA dataset)", "/content/huggingface.png")  # Update path if necessary
        metadata_files = Custom("Metadata file", "/content/metadata.png",)

    # Defining AWS S3 Storage
    with Cluster("Data Storage"):
        s3_bucket = S3("AWS S3 Bucket")

    # Defining UI with Streamlit
    with Cluster("User Interface"):
        streamlit_app = Streamlit("Streamlit App")

    # Defining OpenAI
    with Cluster("OpenAI"):
        openai_api = OpenAI("OpenAI API")

    # Connecting to the diagram nodes
    hugging_face >> Edge(label="Upload Data into S3") >> s3_bucket
    s3_bucket >> Edge(label="Load the data to the application") >> streamlit_app
    streamlit_app >> Edge(label="Select use case and validate(includes steps if necessary)") >> openai_api
    openai_api >> Edge(label="Finale result and validation") >> streamlit_app
    streamlit_app >> Edge(label="User interaction with the application") >> user
    openai_api >> user

    # Metadata file connection
    hugging_face - Edge(style="dashed", color="red") - metadata_files

from IPython.display import Image, display
display(Image(filename="gaia_data_architectural_diagram.png"))

"""# **Detailed Data Architectural Diagram**"""

#Architectural diagran with complete functionality

from diagrams import Diagram, Cluster, Edge, Node
from diagrams.custom import Custom
from diagrams.onprem.client import Users
from diagrams.aws.storage import S3
import os

# Defining custom class
class CustomIcon(Node):
    _provider = "custom"
    _icon_dir = "/usr/local/share/diagrams/resources/custom"
class HuggingFace(CustomIcon):
    _icon = "huggingface.png"
class Streamlit(CustomIcon):
    _icon = "streamlit.png"
class OpenAI(CustomIcon):
    _icon = "openai.png"
class AWSS3(CustomIcon):
    _icon = "aws_s3.png"
class MetadataFiles(CustomIcon):
    _icon = "metadata.png"

# Diagram structure name
with Diagram(" GAIA Data Architecture", show=True, direction="TB"):

    # Defining the users interacting with the system
    user = Users("User")

    # Defining Hugging Face
    with Cluster("Hugging Face"):
        hugging_face = Custom("Hugging Face(GAIA dataset)", "/content/huggingface.png")
        metadata_files = Custom("Metadata file", "/content/metadata.png")

    # Defining AWS S3 Storage
    with Cluster("Data Storage"):
        s3_bucket = S3("AWS S3 Bucket")

    # Defining User Interface
    with Cluster("User Interface (Streamlit App)"):
        streamlit_app = Streamlit("Streamlit App")

        validation_test_selection = Streamlit("Validation Test Selection")

        with Cluster("Validation Process"):
         validation_approved = Streamlit("'As is'")
         validation_disapproved = Custom("'With Steps'","/content/metadata.png")
         validation_inconclusive = Streamlit("'Inconclusive'")
        streamlit_reports = Streamlit("Streamlit Final Report")

    # Defining OpenAI
    with Cluster("OpenAI"):
        openai_api = OpenAI("OpenAI API")

    # Connecting the main diagram nodes
    hugging_face >> Edge(label="Upload Data into S3") >> s3_bucket
    s3_bucket >> Edge(label="Load data to the application") >> streamlit_app
    streamlit_app >> Edge(label="Select use case and validate(includes steps if necessary)") >> openai_api
    openai_api >> Edge(label="Finale result and validation") >> streamlit_app
    streamlit_app >> Edge(label="User interaction with the application") >> user
    openai_api >> user

    # Connecting components inside UI
    validation_test_selection >> validation_approved >> streamlit_reports
    validation_test_selection >> validation_disapproved >> streamlit_reports
    validation_test_selection >> validation_inconclusive >> streamlit_reports
    # Metadata file connection
    hugging_face - Edge(style="dashed", color="red") - metadata_files

from IPython.display import Image, display
display(Image(filename="gaia_data_architecture.png"))

